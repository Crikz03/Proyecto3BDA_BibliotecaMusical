/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frames;

import dto.ArtistaDTO;
import dto.UsuarioDTO;
import excepciones.NegocioException;
import excepciones.PersistenciaException;
import interfaces.IArtistaBO;
import interfaces.IUsuarioBO;
import java.awt.BorderLayout;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.AbstractTableModel;
import negocio.ArtistaBO;
import negocio.UsuarioBO;
import recursos.Forms;
import recursos.GestorImagenesMongo;
import recursos.Imagen;
import recursos.ValidadorFrames;

/**
 *
 * @author Chris
 */
public class FrmEditarGenerosBaneados extends javax.swing.JFrame {

    private Imagen imagenPerfil;
    private UsuarioDTO usuario;
    private IUsuarioBO usuariobo;
    private ArtistaDTO artista;
    private IArtistaBO artistabo;
    private UsuarioDTO usuarioLoggeado;
    private GenerosTableModel modeloTabla;

    /**
     * Creates new form FrmRegistrarse
     */
    public FrmEditarGenerosBaneados(UsuarioDTO usuarioLoggeado) throws PersistenciaException {
        initComponents();
        this.usuariobo = new UsuarioBO();
        this.usuarioLoggeado = usuarioLoggeado;
        setLocationRelativeTo(null);
        this.artistabo = new ArtistaBO();

        List<String> generos = artistabo.obtenerGenerosDeArtistas();
        List<String> generosNoDeseados = usuarioLoggeado.getGenerosNoDeseados();
        if (generosNoDeseados == null) {
            generosNoDeseados = new ArrayList<>(); // Usa una lista vac√≠a si es null
        }
        System.out.println("Generos disponibles: " + generos);
System.out.println("Generos baneados: " + generosNoDeseados);
        inicializarTablaGeneros(generos, generosNoDeseados);
        this.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelArtistas = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        btnGuardarBaneos = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaGeneros = new javax.swing.JTable();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        panelArtistas.setBackground(new java.awt.Color(102, 0, 102));
        panelArtistas.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 0, 153)));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Seleccionar generos que desea banear:");

        btnGuardarBaneos.setBackground(new java.awt.Color(204, 0, 204));
        btnGuardarBaneos.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnGuardarBaneos.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardarBaneos.setText("Guardar Cambios");
        btnGuardarBaneos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarBaneosActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Generos baneados");

        tablaGeneros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablaGeneros);

        btnCancelar.setBackground(new java.awt.Color(204, 0, 204));
        btnCancelar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelArtistasLayout = new javax.swing.GroupLayout(panelArtistas);
        panelArtistas.setLayout(panelArtistasLayout);
        panelArtistasLayout.setHorizontalGroup(
            panelArtistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelArtistasLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(panelArtistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelArtistasLayout.createSequentialGroup()
                        .addGroup(panelArtistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelArtistasLayout.createSequentialGroup()
                        .addGroup(panelArtistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(panelArtistasLayout.createSequentialGroup()
                                .addComponent(btnCancelar)
                                .addGap(34, 34, 34)
                                .addComponent(btnGuardarBaneos)))
                        .addGap(607, 607, 607))))
        );
        panelArtistasLayout.setVerticalGroup(
            panelArtistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelArtistasLayout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelArtistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardarBaneos)
                    .addComponent(btnCancelar))
                .addGap(143, 143, 143))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelArtistas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelArtistas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 826, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarBaneosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarBaneosActionPerformed
        actualizarBaneos();
        Forms.cargarForm(new FrmPerfil(usuarioLoggeado), this);
    }//GEN-LAST:event_btnGuardarBaneosActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        Forms.cargarForm(new FrmPerfil(usuarioLoggeado), this);
    }//GEN-LAST:event_btnCancelarActionPerformed

    public class GenerosTableModel extends AbstractTableModel {

    private final List<String> generos;
    private final Map<String, Boolean> seleccionados; // G√©nero -> Seleccionado

    public GenerosTableModel(List<String> generos, List<String> generosBaneados) {
        this.generos = generos;
        this.seleccionados = new HashMap<>();

        // Inicializar el estado de los checkboxes
        for (String genero : generos) {
            seleccionados.put(genero, generosBaneados != null && generosBaneados.contains(genero));
        }
    }

    @Override
    public int getRowCount() {
        return generos.size();
    }

    @Override
    public int getColumnCount() {
        return 2; // Columna de g√©nero y columna de checkbox
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        String genero = generos.get(rowIndex);
        switch (columnIndex) {
            case 0:
                return genero; // Nombre del g√©nero
            case 1:
                return seleccionados.get(genero); // Estado del checkbox
            default:
                return null;
        }
    }

    @Override
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        if (columnIndex == 1 && aValue instanceof Boolean) {
            String genero = generos.get(rowIndex);
            seleccionados.put(genero, (Boolean) aValue); // Actualizar selecci√≥n
            fireTableCellUpdated(rowIndex, columnIndex);
        }
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return columnIndex == 1; // Solo la columna del checkbox es editable
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
        return columnIndex == 1 ? Boolean.class : String.class;
    }

    public List<String> getGenerosSeleccionados() {
        List<String> seleccionadosList = new ArrayList<>();
        for (Map.Entry<String, Boolean> entry : seleccionados.entrySet()) {
            if (entry.getValue()) {
                seleccionadosList.add(entry.getKey());
            }
        }
        return seleccionadosList;
    }
}

    private void inicializarTablaGeneros(List<String> generos, List<String> generosBaneados) {
    modeloTabla = new GenerosTableModel(generos, generosBaneados);
    tablaGeneros = new JTable(modeloTabla);
    tablaGeneros.setFillsViewportHeight(true);
    tablaGeneros.setAutoCreateRowSorter(true);

    jScrollPane2.setViewportView(tablaGeneros);
    
}

    /*private void actualizarBaneos() {
        List<String> generosSeleccionados = modeloTabla.getGenerosSeleccionados(); // Obtener g√©neros seleccionados
    try {
        // Actualizar la lista de g√©neros baneados en el usuario
        usuarioLoggeado.setGenerosNoDeseados(generosSeleccionados);

        // Guardar los cambios en la base de datos
        usuariobo.actualizarGenerosBaneados(usuarioLoggeado.getId(), generosSeleccionados);

        JOptionPane.showMessageDialog(this, "Los g√©neros baneados se actualizaron correctamente.", 
                "√âxito", JOptionPane.INFORMATION_MESSAGE);
    } catch (PersistenciaException e) {
        JOptionPane.showMessageDialog(this, "Error al actualizar los g√©neros baneados: " + e.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
    }
    }*/
    private void actualizarBaneos() {
        List<String> generosSeleccionados = modeloTabla.getGenerosSeleccionados();
        try {
            usuariobo.actualizarGenerosNoDeseados(usuarioLoggeado.getId(), generosSeleccionados);

            JOptionPane.showMessageDialog(this, "Los g√©neros baneados se actualizaron correctamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);

            // Actualizar el usuario localmente (opcional)
            usuarioLoggeado.setGenerosNoDeseados(generosSeleccionados);
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar los g√©neros baneados: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardarBaneos;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelArtistas;
    private javax.swing.JTable tablaGeneros;
    // End of variables declaration//GEN-END:variables
}
