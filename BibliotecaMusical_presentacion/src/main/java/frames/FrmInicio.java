/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frames;

import dto.AlbumDTO;
import dto.ArtistaDTO;
import dto.DetallesCancionDTO;
import dto.UsuarioDTO;
import excepciones.NegocioException;
import interfaces.IAlbumBO;
import interfaces.IArtistaBO;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.border.LineBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import negocio.AlbumBO;
import negocio.ArtistaBO;
import recursos.Forms;
import recursos.GestorImagenesMongo;
import recursos.Imagen;

/**
 *
 * @author Chris
 */
public class FrmInicio extends javax.swing.JFrame {

    private IArtistaBO abo;
    private IAlbumBO albumbo;
    private UsuarioDTO usuarioLoggeado;
    private List<DetallesCancionDTO> cancionesBuscadas;
    private List<AlbumDTO> albumesBuscados;
    private List<ArtistaDTO> artistasBuscados;

    private boolean isUpdatingComboBox = false;

    /**
     * Creates new form FrmHome
     *
     * @param usuarioLoggeado
     */
    public FrmInicio(UsuarioDTO usuarioLoggeado) {
        initComponents();
        this.abo = new ArtistaBO();
        this.albumbo = new AlbumBO();
        this.usuarioLoggeado = usuarioLoggeado;
        this.cancionesBuscadas = cancionesBuscadas;

        this.configuraFrame();

        //buscador
        inicializarBuscador();

    }

    private void configuraFrame() {
        // Maximiza el frame al tamaño de la pantalla
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        // Crea un JScrollPane alrededor de jPanel1
        JScrollPane scrollPane = new JScrollPane(jPanel1);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        // Configura el layout del contenido principal
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(scrollPane, BorderLayout.CENTER);

        // Configuraciones adicionales del frame
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        this.SetImageLabel(jLabel1, "images/logo.png");

        // Lógica personalizada
        this.obtieneArtistas();
        this.obtieneAlbumes();
        this.obtieneCanciones();
        this.cargarDatosUsuario();

        // Revalida y repinta
        jPanel1.revalidate();
        jPanel1.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupResultados = new java.awt.PopupMenu();
        jPanel1 = new javax.swing.JPanel();
        panelCanciones = new javax.swing.JPanel();
        panelAlbumes = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        bHome = new javax.swing.JButton();
        bAlbumes = new javax.swing.JButton();
        bAlbumes1 = new javax.swing.JButton();
        bAlbumes2 = new javax.swing.JButton();
        bAlbumes3 = new javax.swing.JButton();
        btnPerfil = new javax.swing.JButton();
        bCerrarSesion = new javax.swing.JButton();
        panelArtistas = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lblNameUser = new javax.swing.JLabel();
        lblFoto = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnBuscar = new javax.swing.JButton();
        checkCanciones = new javax.swing.JCheckBox();
        checkAlbumes = new javax.swing.JCheckBox();
        checkArtistas = new javax.swing.JCheckBox();
        comboResultados = new javax.swing.JComboBox<>();
        txtBuscar = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        popupResultados.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        panelCanciones.setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout panelCancionesLayout = new javax.swing.GroupLayout(panelCanciones);
        panelCanciones.setLayout(panelCancionesLayout);
        panelCancionesLayout.setHorizontalGroup(
            panelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelCancionesLayout.setVerticalGroup(
            panelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 178, Short.MAX_VALUE)
        );

        panelAlbumes.setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout panelAlbumesLayout = new javax.swing.GroupLayout(panelAlbumes);
        panelAlbumes.setLayout(panelAlbumesLayout);
        panelAlbumesLayout.setHorizontalGroup(
            panelAlbumesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelAlbumesLayout.setVerticalGroup(
            panelAlbumesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 178, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 3, new java.awt.Color(255, 0, 153)));

        jLabel1.setBorder(new javax.swing.border.MatteBorder(null));

        bHome.setBackground(new java.awt.Color(0, 0, 0));
        bHome.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        bHome.setForeground(new java.awt.Color(255, 255, 255));
        bHome.setText("Home");
        bHome.setContentAreaFilled(false);
        bHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHomeActionPerformed(evt);
            }
        });

        bAlbumes.setBackground(new java.awt.Color(0, 0, 0));
        bAlbumes.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        bAlbumes.setForeground(new java.awt.Color(255, 255, 255));
        bAlbumes.setText("Albumes");
        bAlbumes.setContentAreaFilled(false);
        bAlbumes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAlbumesActionPerformed(evt);
            }
        });

        bAlbumes1.setBackground(new java.awt.Color(0, 0, 0));
        bAlbumes1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        bAlbumes1.setForeground(new java.awt.Color(255, 255, 255));
        bAlbumes1.setText("Artistas");
        bAlbumes1.setContentAreaFilled(false);
        bAlbumes1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAlbumes1ActionPerformed(evt);
            }
        });

        bAlbumes2.setBackground(new java.awt.Color(0, 0, 0));
        bAlbumes2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        bAlbumes2.setForeground(new java.awt.Color(255, 255, 255));
        bAlbumes2.setText("Favoritos");
        bAlbumes2.setContentAreaFilled(false);
        bAlbumes2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAlbumes2ActionPerformed(evt);
            }
        });

        bAlbumes3.setBackground(new java.awt.Color(0, 0, 0));
        bAlbumes3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        bAlbumes3.setForeground(new java.awt.Color(255, 255, 255));
        bAlbumes3.setText("Canciones");
        bAlbumes3.setContentAreaFilled(false);
        bAlbumes3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAlbumes3ActionPerformed(evt);
            }
        });

        btnPerfil.setBackground(new java.awt.Color(0, 0, 0));
        btnPerfil.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnPerfil.setForeground(new java.awt.Color(255, 255, 255));
        btnPerfil.setText("Perfil de usuario");
        btnPerfil.setContentAreaFilled(false);
        btnPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPerfilActionPerformed(evt);
            }
        });

        bCerrarSesion.setBackground(new java.awt.Color(0, 0, 0));
        bCerrarSesion.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        bCerrarSesion.setForeground(new java.awt.Color(255, 0, 153));
        bCerrarSesion.setText("Cerrar Sesión");
        bCerrarSesion.setContentAreaFilled(false);
        bCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCerrarSesionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bAlbumes3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bAlbumes2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bAlbumes1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bAlbumes, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bHome, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bCerrarSesion))
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnPerfil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bHome)
                .addGap(18, 18, 18)
                .addComponent(bAlbumes)
                .addGap(18, 18, 18)
                .addComponent(bAlbumes1)
                .addGap(18, 18, 18)
                .addComponent(bAlbumes2)
                .addGap(18, 18, 18)
                .addComponent(bAlbumes3)
                .addGap(18, 18, 18)
                .addComponent(btnPerfil)
                .addGap(18, 18, 18)
                .addComponent(bCerrarSesion)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelArtistas.setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout panelArtistasLayout = new javax.swing.GroupLayout(panelArtistas);
        panelArtistas.setLayout(panelArtistasLayout);
        panelArtistasLayout.setHorizontalGroup(
            panelArtistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 578, Short.MAX_VALUE)
        );
        panelArtistasLayout.setVerticalGroup(
            panelArtistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 178, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setBorder(new javax.swing.border.MatteBorder(null));

        lblNameUser.setBackground(new java.awt.Color(0, 0, 0));
        lblNameUser.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblNameUser.setForeground(new java.awt.Color(255, 255, 255));
        lblNameUser.setText("name");

        lblFoto.setText("lblFoto");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFoto, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNameUser, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNameUser))
                .addContainerGap())
        );

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Canciones");

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Albumes");

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Artistas");

        jLabel6.setBackground(new java.awt.Color(255, 0, 153));
        jLabel6.setForeground(new java.awt.Color(255, 0, 153));
        jLabel6.setText("jLabel6");
        jLabel6.setOpaque(true);

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));

        btnBuscar.setBackground(new java.awt.Color(255, 0, 153));
        btnBuscar.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        checkCanciones.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        checkCanciones.setForeground(new java.awt.Color(255, 255, 255));
        checkCanciones.setText("Canciones");
        checkCanciones.setToolTipText("");

        checkAlbumes.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        checkAlbumes.setForeground(new java.awt.Color(255, 255, 255));
        checkAlbumes.setText("Álbumes");

        checkArtistas.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        checkArtistas.setForeground(new java.awt.Color(255, 255, 255));
        checkArtistas.setText("Artistas");

        comboResultados.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtBuscar.setBackground(new java.awt.Color(51, 51, 51));
        txtBuscar.setForeground(new java.awt.Color(255, 255, 255));
        txtBuscar.setText("Buscar por canciones, álbumes, artistas...");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Buscar");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboResultados, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addComponent(checkArtistas)
                        .addGap(18, 18, 18)
                        .addComponent(checkAlbumes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkCanciones)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(checkCanciones)
                        .addComponent(checkAlbumes)
                        .addComponent(checkArtistas))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelArtistas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelAlbumes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelCanciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 92, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelArtistas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelAlbumes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCanciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bHomeActionPerformed

    private void bAlbumesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAlbumesActionPerformed
        Forms.cargarForm(new FrmPestañaAlbumes(usuarioLoggeado), this);
    }//GEN-LAST:event_bAlbumesActionPerformed

    private void bAlbumes1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAlbumes1ActionPerformed
        Forms.cargarForm(new FrmPestañaArtistas(usuarioLoggeado), this);
    }//GEN-LAST:event_bAlbumes1ActionPerformed

    private void bAlbumes2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAlbumes2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bAlbumes2ActionPerformed

    private void bAlbumes3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAlbumes3ActionPerformed
        Forms.cargarForm(new FrmPestañaCanciones(usuarioLoggeado), this);
    }//GEN-LAST:event_bAlbumes3ActionPerformed

    private void btnPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPerfilActionPerformed
        Forms.cargarForm(new FrmPerfil(usuarioLoggeado), this);
    }//GEN-LAST:event_btnPerfilActionPerformed

    private void bCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCerrarSesionActionPerformed
        Forms.cargarForm(new FrmInicioSesion(), this);
    }//GEN-LAST:event_bCerrarSesionActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        String termino = txtBuscar.getText().trim();

        if (termino.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un término de búsqueda.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Inicializar las listas de resultados
        cancionesBuscadas = new ArrayList<>();
        List<AlbumDTO> albumesBuscados = new ArrayList<>();
        List<ArtistaDTO> artistasBuscados = new ArrayList<>();
        try {
            // Buscar canciones relacionadas
            // 1. Canciones por nombre
            List<DetallesCancionDTO> cancionesPorNombre = albumbo.buscarCancionesPorNombre(termino);
            cancionesBuscadas.addAll(cancionesPorNombre);

            // 2. Canciones de álbumes relacionados
            List<AlbumDTO> albumesRelacionados = albumbo.buscarPorNombre(termino);
            for (AlbumDTO album : albumesRelacionados) {
                if (album.getCanciones() != null) {
                    cancionesBuscadas.addAll(album.getCanciones());
                }
            }

            // 3. Canciones de artistas relacionados
            List<ArtistaDTO> artistasRelacionados = abo.buscarArtistasPorNombre(termino);
            for (ArtistaDTO artista : artistasRelacionados) {
                List<DetallesCancionDTO> cancionesDelArtista = albumbo.buscarCancionesPorArtista(artista.getId());
                cancionesBuscadas.addAll(cancionesDelArtista);
            }

            // Filtrar duplicados en canciones
            // Buscar álbumes relacionados
            // 1. Álbumes por nombre
            albumesBuscados.addAll(albumbo.buscarPorNombre(termino));

            // 2. Álbumes de artistas relacionados
            for (ArtistaDTO artista : artistasRelacionados) {
                List<AlbumDTO> albumesDelArtista = albumbo.buscarPorArtista(artista.getId());
                albumesBuscados.addAll(albumesDelArtista);
            }

            // 3. Álbumes relacionados por canciones
            for (DetallesCancionDTO cancion : cancionesBuscadas) {
                List<AlbumDTO> albumesPorCancion = albumbo.buscarAlbumesPorNombreDeCancion(cancion.getTitulo());
                albumesBuscados.addAll(albumesPorCancion);
            }

            // Filtrar duplicados en álbumes
            albumesBuscados = albumesBuscados.stream()
                    .collect(Collectors.toMap(
                            AlbumDTO::getNombre, // Clave: Nombre del álbum
                            album -> album, // Valor: El álbum completo
                            (albumExistente, nuevoAlbum) -> albumExistente // Resolver conflictos: Mantener el primero
                    ))
                    .values()
                    .stream()
                    .collect(Collectors.toList());

            // Agregar artistas relacionados por álbum
            for (AlbumDTO album : albumesBuscados) {
                ArtistaDTO artista = abo.obtenerArtistaPorId(album.getArtistaId());
                if (artista != null) {
                    artistasBuscados.add(artista);
                }
            }
            // Agregar artistas relacionados por canciones
            for (DetallesCancionDTO cancion : cancionesBuscadas) {
                ArtistaDTO artista = abo.obtenerArtistaPorId(cancion.getIdArtista());
                if (artista != null) {
                    artistasBuscados.add(artista);
                }
            }

            // Filtrar duplicados en artistas
            artistasBuscados = artistasBuscados.stream()
                    .collect(Collectors.toMap(
                            ArtistaDTO::getNombre, // Clave: Nombre del artista
                            artista -> artista, // Valor: El objeto ArtistaDTO completo
                            (artistaExistente, nuevoArtista) -> artistaExistente // Resolver conflictos manteniendo el primero
                    ))
                    .values()
                    .stream()
                    .collect(Collectors.toList());

            for (AlbumDTO album : albumesBuscados) {
                if (album.getCanciones() != null) {
                    cancionesBuscadas.addAll(album.getCanciones());
                }
            }

            cancionesBuscadas = cancionesBuscadas.stream()
                    .distinct()
                    .collect(Collectors.toList());
            this.albumesBuscados = albumesBuscados;
            this.artistasBuscados = artistasBuscados;

            llenarPanelAlbum(this.albumesBuscados);
            actualizarPanelCanciones(this.cancionesBuscadas);
            llenaPanelArtistas(this.artistasBuscados);
        } catch (NegocioException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Ocurrió un error durante la búsqueda.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void SetImageLabel(JLabel labelname, String root) {
        ImageIcon image = new ImageIcon(root);
        Icon icon = new ImageIcon(image.getImage().getScaledInstance(labelname.getWidth(), labelname.getHeight(), Image.SCALE_DEFAULT));
        labelname.setIcon(icon);
        this.repaint();
    }

    private void cargarDatosUsuario() {
        if (usuarioLoggeado != null) {
            lblNameUser.setText(usuarioLoggeado.getNombreUsuario());
            ImageIcon imageIcon = GestorImagenesMongo.getImageIcon(
                    usuarioLoggeado.getFotoPerfil(),
                    GestorImagenesMongo.SizeImage.SMALL
            );

            if (imageIcon != null) {
                // Obtener el objeto Image desde el ImageIcon
                Image originalImage = imageIcon.getImage();

                // Crear una imagen circular
                int size = Math.min(lblFoto.getWidth(), lblFoto.getHeight());
                Image roundedImage = makeRoundedImage(originalImage, size);

                // Asignar la imagen redondeada al JLabel
                lblFoto.setIcon(new ImageIcon(roundedImage));
            } else {
                lblFoto.setText("Sin Foto");
            }
        }
    }

    private void obtieneAlbumes() {
        try {
            // Obtener la lista de géneros no deseados del usuario, asegurando que no sea null
            List<String> generosNoDeseados = usuarioLoggeado.getGenerosNoDeseados() != null
                    ? usuarioLoggeado.getGenerosNoDeseados()
                    : Collections.emptyList();

            // Obtener todos los álbumes
            List<AlbumDTO> albumes = this.albumbo.obtenerAlbumes();

            // Filtrar álbumes cuyo género no esté en la lista de géneros no deseados
            List<AlbumDTO> albumesFiltrados = albumes.stream()
                    .filter(album -> {
                        // Validar si el género no está en la lista de no deseados
                        List<String> generosAlbum = album.getGenero();
                        if (generosAlbum == null || generosAlbum.isEmpty()) {
                            return false; // Excluir si no tiene géneros
                        }
                        return generosAlbum.stream().noneMatch(generosNoDeseados::contains);
                    })
                    .collect(Collectors.toList());

            // Mezclar y limitar a 5 álbumes
            Collections.shuffle(albumesFiltrados);
            List<AlbumDTO> albumesAMostrar = albumesFiltrados.subList(0, Math.min(5, albumesFiltrados.size()));
            llenarPanelAlbum(albumesAMostrar);

        } catch (NegocioException e) {
            e.printStackTrace();
        }
    }

    private void llenarPanelAlbum(List<AlbumDTO> albumes) {
        // Limpiar el panel antes de agregar nuevos álbumes
        panelAlbumes.removeAll();

        // Limitar la cantidad de álbumes a mostrar a 5
        List<AlbumDTO> albumesAMostrar = albumes.subList(0, Math.min(5, albumes.size()));

        // Configurar el layout dinámico basado en la cantidad de álbumes a mostrar
        panelAlbumes.setLayout(new GridLayout(1, albumesAMostrar.size(), 10, 10));
        panelAlbumes.setBackground(new Color(18, 18, 18));

        // Crear paneles para los álbumes
        for (AlbumDTO album : albumesAMostrar) {
            JPanel panelAlbum = creaPanel(album, album.getImagenPortada());
            panelAlbumes.add(panelAlbum);
        }

        // Crear y agregar el botón "Ver Todos"
        JButton btnVerTodos = crearBotonVerTodos("Ver todos los álbumes", e -> {
            if (albumesBuscados != null && !albumesBuscados.isEmpty()) {
                Forms.cargarForm(new FrmPestañaAlbumes(usuarioLoggeado, albumesBuscados), this);
            } else {
                Forms.cargarForm(new FrmPestañaAlbumes(usuarioLoggeado), this);
            }
        });

        // Agregar el botón "Ver Todos" al panel
        JPanel panelBoton = new JPanel();
        panelBoton.setBackground(new Color(18, 18, 18));
        panelBoton.setLayout(new GridBagLayout());
        panelBoton.add(btnVerTodos);
        panelAlbumes.add(panelBoton);

        // Revalidar y repintar el panel
        panelAlbumes.revalidate();
        panelAlbumes.repaint();
    }

    private void obtieneCanciones() {
        try {
            // Obtener la lista de géneros no deseados del usuario, asegurando que no sea null
            List<String> generosNoDeseados = usuarioLoggeado.getGenerosNoDeseados() != null
                    ? usuarioLoggeado.getGenerosNoDeseados()
                    : Collections.emptyList();

            // Obtener todas las canciones
            List<DetallesCancionDTO> canciones = this.albumbo.obtenerCancionesDeAlbumes2();

            // Filtrar canciones basándose en los géneros de los artistas
            List<DetallesCancionDTO> cancionesFiltradas = canciones.stream()
                    .filter(cancion -> {
                        if (cancion.getIdArtista() == null) {
                            System.out.println("Canción sin ID de artista: " + cancion.getTitulo());
                            return false; // Excluir canciones sin ID de artista
                        }
                        try {
                            ArtistaDTO artista = this.abo.obtenerArtistaPorId(cancion.getIdArtista());
                            if (artista == null || artista.getGenero() == null) {
                                System.out.println("Artista no encontrado o sin género: " + cancion.getIdArtista());
                                return false; // Excluir si el artista no existe o no tiene género
                            }
                            if (!generosNoDeseados.contains(artista.getGenero())) {
                                cancion.setNombreArtista(artista.getNombre());
                                return true;
                            }
                        } catch (NegocioException e) {
                            e.printStackTrace();
                        }
                        return false; // Excluir si ocurre un error o está en géneros no deseados
                    })
                    .collect(Collectors.toList());

            // Mezclar y limitar a 5 canciones
            Collections.shuffle(cancionesFiltradas);
            List<DetallesCancionDTO> cancionesAMostrar = cancionesFiltradas.subList(0, Math.min(5, cancionesFiltradas.size()));
            actualizarPanelCanciones(cancionesAMostrar);

        } catch (NegocioException e) {
            e.printStackTrace();
        }
    }

    private void actualizarPanelCanciones(List<DetallesCancionDTO> cancionesAMostrar) {
        // Limitar las canciones a mostrar a un máximo de 5
        List<DetallesCancionDTO> cancionesLimitadas = cancionesAMostrar.subList(0, Math.min(5, cancionesAMostrar.size()));

        // Limpiar el panel antes de agregar nuevas canciones
        panelCanciones.removeAll();

        // Configurar el layout
        panelCanciones.setLayout(new GridLayout(1, cancionesLimitadas.size(), 10, 10));
        panelCanciones.setBackground(new Color(18, 18, 18));

        // Crear paneles para las canciones
        for (DetallesCancionDTO cancion : cancionesLimitadas) {
            JPanel panelCancion = creaPanelCancion(cancion);
            panelCanciones.add(panelCancion);
        }

        // Crear y agregar el botón "Ver Todos"
        JButton btnVerTodos = crearBotonVerTodos("Ver todas las canciones", e -> {
            if (cancionesBuscadas != null) {
                if (cancionesBuscadas.size() > 0) {
                    Forms.cargarForm(new FrmPestañaCanciones(usuarioLoggeado, cancionesBuscadas), this);
                } else {
                    Forms.cargarForm(new FrmPestañaCanciones(usuarioLoggeado), this);
                }
            } else {
                Forms.cargarForm(new FrmPestañaCanciones(usuarioLoggeado), this);
            }
        });

        JPanel panelBoton = new JPanel();
        panelBoton.setBackground(new Color(18, 18, 18));
        panelBoton.setLayout(new GridBagLayout());
        panelBoton.add(btnVerTodos);

        panelCanciones.add(panelBoton);

        // Revalidar y repintar el panel para reflejar los cambios
        panelCanciones.revalidate();
        panelCanciones.repaint();
    }

    private void obtieneArtistas() {
        try {
            // Obtener la lista de géneros no deseados del usuario, asegurando que no sea null
            List<String> generosNoDeseados = usuarioLoggeado.getGenerosNoDeseados() != null
                    ? usuarioLoggeado.getGenerosNoDeseados()
                    : Collections.emptyList();

            // Obtener todos los artistas
            List<ArtistaDTO> artistas = this.abo.obtenerArtistas();

            // Filtrar artistas cuyo género no esté en la lista de géneros no deseados
            List<ArtistaDTO> artistasFiltrados = artistas.stream()
                    .filter(artista -> artista.getGenero() != null && !generosNoDeseados.contains(artista.getGenero()))
                    .collect(Collectors.toList());

            // Mezclar y limitar a 5 artistas
            Collections.shuffle(artistasFiltrados);
            List<ArtistaDTO> artistasAMostrar = artistasFiltrados.subList(0, Math.min(5, artistasFiltrados.size()));
            llenaPanelArtistas(artistasAMostrar);

        } catch (NegocioException e) {
            e.printStackTrace();
        }
    }

    public void llenaPanelArtistas(List<ArtistaDTO> artistasAMostrar) {
        // Limitar los artistas a mostrar a un máximo de 5
        List<ArtistaDTO> artistasLimitados = artistasAMostrar.subList(0, Math.min(5, artistasAMostrar.size()));

        // Limpiar el panel antes de agregar nuevos artistas
        panelArtistas.removeAll();

        // Configurar el layout
        panelArtistas.setLayout(new GridLayout(1, artistasLimitados.size(), 10, 10));
        panelArtistas.setBackground(new Color(18, 18, 18));

        // Crear paneles para los artistas
        for (ArtistaDTO artista : artistasLimitados) {
            JPanel panelArtista = creaPanelRedondo(artista);
            panelArtistas.add(panelArtista);
        }

        // Crear y agregar el botón "Ver Todos"
        JButton btnVerTodos = crearBotonVerTodos("Ver todos los artistas", e -> {
            if (this.artistasBuscados != null) {
                if (this.artistasBuscados.size() > 0) {
                    Forms.cargarForm(new FrmPestañaArtistas(usuarioLoggeado, this.artistasBuscados), this);
                } else {
                    Forms.cargarForm(new FrmPestañaArtistas(usuarioLoggeado), this);
                }
            } else {
                Forms.cargarForm(new FrmPestañaArtistas(usuarioLoggeado), this);
            }

        });

        JPanel panelBoton = new JPanel();
        panelBoton.setBackground(new Color(18, 18, 18));
        panelBoton.setLayout(new GridBagLayout());
        panelBoton.add(btnVerTodos);

        panelArtistas.add(panelBoton);

        // Revalidar y repintar el panel para reflejar los cambios
        panelArtistas.revalidate();
        panelArtistas.repaint();
    }

    private JPanel creaPanelCancion(DetallesCancionDTO cancion) {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(new Color(18, 18, 18));
        panel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton btnFoto = new JButton(); // Cambiado a JButton
        btnFoto.setPreferredSize(new Dimension(80, 140));
        btnFoto.setOpaque(true);
        btnFoto.setContentAreaFilled(false); // Elimina el fondo por defecto
        btnFoto.setBorder(new LineBorder(new Color(18, 18, 18), 5, true));
        btnFoto.setAlignmentX(Component.CENTER_ALIGNMENT);

        // Usa GestorImagenesMongo para convertir la imagen
        if (cancion.getFotoAlbum() != null) {
            ImageIcon icon = GestorImagenesMongo.getImageIcon(cancion.getFotoAlbum(), GestorImagenesMongo.SizeImage.MEDIUM);
            if (icon != null) {
                btnFoto.setIcon(icon); // Asigna la imagen como icono
            } else {
                btnFoto.setBackground(Color.RED); // Indicador de error en la imagen
            }
        } else {
            btnFoto.setBackground(Color.BLUE); // Fondo si no hay imagen
        }

        // Añadir un ActionListener al botón para manejar clics
        btnFoto.addActionListener(e -> {
            Forms.cargarForm(new FrmDetallesCanción(usuarioLoggeado, cancion), this);
        });

        JLabel lblNombre = new JLabel(cancion.getTitulo());
        lblNombre.setFont(new Font("Arial", Font.PLAIN, 14));
        lblNombre.setForeground(Color.WHITE);
        lblNombre.setAlignmentX(Component.CENTER_ALIGNMENT);

        panel.add(btnFoto);
        panel.add(Box.createVerticalStrut(5)); // Espaciado
        panel.add(lblNombre);

        return panel;
    }

    private JPanel creaPanelRedondo(ArtistaDTO artista) {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(new Color(18, 18, 18));
        panel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton btnFoto = new JButton();
        btnFoto.setPreferredSize(new Dimension(80, 140));
        btnFoto.setOpaque(false);
        btnFoto.setContentAreaFilled(false);
        btnFoto.setBorder(null);
        btnFoto.setAlignmentX(Component.CENTER_ALIGNMENT);

        // Crear imagen redonda
        if (artista.getImagen() != null) {
            ImageIcon icon = GestorImagenesMongo.getImageIcon(artista.getImagen(), GestorImagenesMongo.SizeImage.MEDIUM);
            if (icon != null) {
                btnFoto.setIcon(new ImageIcon(makeRoundedImage(icon.getImage(), 130)));
            } else {
                btnFoto.setBackground(Color.RED);
            }
        } else {
            btnFoto.setBackground(Color.BLUE);
        }

        btnFoto.addActionListener(e -> {
            Forms.cargarForm(new FrmDetallesArtistas(usuarioLoggeado, artista), this);
        });

        JLabel lblNombre = new JLabel(artista.getNombre());
        lblNombre.setFont(new Font("Arial", Font.PLAIN, 14));
        lblNombre.setForeground(Color.WHITE);
        lblNombre.setAlignmentX(Component.CENTER_ALIGNMENT);

        panel.add(btnFoto);
        panel.add(Box.createVerticalStrut(10));
        panel.add(lblNombre);

        return panel;
    }

    private JPanel creaPanel(AlbumDTO album, Imagen imagen) {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(new Color(18, 18, 18));
        panel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton btnFoto = new JButton(); // Cambiado a JButton
        btnFoto.setPreferredSize(new Dimension(150, 150));
        btnFoto.setOpaque(true);
        btnFoto.setContentAreaFilled(false); // Elimina el fondo por defecto
        btnFoto.setBorder(new LineBorder(new Color(18, 18, 18), 5, true));
        btnFoto.setAlignmentX(Component.CENTER_ALIGNMENT);

        // Usa GestorImagenesMongo para convertir la imagen
        if (imagen != null) {
            ImageIcon icon = GestorImagenesMongo.getImageIcon(imagen, GestorImagenesMongo.SizeImage.MEDIUM);
            if (icon != null) {
                btnFoto.setIcon(icon); // Asigna la imagen como icono
            } else {
                btnFoto.setBackground(Color.RED); // Indicador de error en la imagen
            }
        } else {
            btnFoto.setBackground(Color.BLUE); // Fondo si no hay imagen
        }

        // Añadir un ActionListener al botón para manejar clics
        btnFoto.addActionListener(e -> {
            System.out.println("Nocausa");
            Forms.cargarForm(new FrmDetallesAlbum(usuarioLoggeado, album), this);
        });

        JLabel lblNombre = new JLabel(album.getNombre());
        lblNombre.setFont(new Font("Arial", Font.PLAIN, 14));
        lblNombre.setForeground(Color.WHITE);
        lblNombre.setAlignmentX(Component.CENTER_ALIGNMENT);

        panel.add(btnFoto);
        panel.add(Box.createVerticalStrut(5)); // Espaciado
        panel.add(lblNombre);

        return panel;
    }

    /**
     * Método para redondear una imagen.
     */
    private Image makeRoundedImage(Image img, int diameter) {
        BufferedImage roundedImage = new BufferedImage(diameter, diameter, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = roundedImage.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        g2.setClip(new Ellipse2D.Float(0, 0, diameter, diameter));
        g2.drawImage(img, 0, 0, diameter, diameter, null);
        g2.dispose();

        return roundedImage;
    }

    private JButton crearBotonVerTodos(String tooltip, ActionListener actionListener) {
        JButton btnVerTodos = new JButton("+") {
            @Override
            protected void paintComponent(Graphics g) {
                // Hacer que el botón sea redondo al dibujar un óvalo relleno
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(getBackground());
                g2.fillOval(0, 0, getWidth(), getHeight());
                super.paintComponent(g2);
            }

            @Override
            protected void paintBorder(Graphics g) {
                // Dibujar el borde redondeado
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(getForeground());
                g2.drawOval(0, 0, getWidth() - 1, getHeight() - 1);
            }

            @Override
            public Dimension getPreferredSize() {
                // Asegurar que el botón tenga un tamaño igual en ancho y alto
                return new Dimension(60, 60);
            }
        };

        btnVerTodos.setFont(new Font("Arial", Font.BOLD, 24));
        btnVerTodos.setForeground(Color.WHITE); // Texto blanco
        btnVerTodos.setBackground(new Color(36, 36, 36)); // Fondo oscuro
        btnVerTodos.setFocusPainted(false); // Sin borde al hacer clic
        btnVerTodos.setContentAreaFilled(false); // Evitar relleno estándar
        btnVerTodos.setToolTipText(tooltip);

        // Añadir acción personalizada
        btnVerTodos.addActionListener(actionListener);

        return btnVerTodos;
    }

    private void inicializarBuscador() {

        // ComboBox para mostrar los resultados
        comboResultados.setEditable(false); // No editable
        comboResultados.setVisible(false); // Oculto al inicio

        txtBuscar.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (txtBuscar.getText().equals("Buscar por canciones, álbumes, artistas...")) {
                    txtBuscar.setText(""); // Limpiar el texto
                    txtBuscar.setForeground(Color.WHITE); // Cambiar el color a texto normal
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (txtBuscar.getText().trim().isEmpty()) {
                    txtBuscar.setText("Buscar por canciones, álbumes, artistas..."); // Restaurar el placeholder
                    txtBuscar.setForeground(Color.WHITE); // Cambiar el color a gris
                }
            }
        });

        // Eventos
        // Eventos para buscar dinámicamente
        txtBuscar.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                actualizarComboResultados();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                actualizarComboResultados();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                actualizarComboResultados();
            }
        });

        // Evento de selección del JComboBox
        comboResultados.addActionListener(e -> {
            if (!isUpdatingComboBox) { // Solo permitir la selección si no está actualizando
                String seleccionado = (String) comboResultados.getSelectedItem();
                if (seleccionado != null && !seleccionado.isEmpty()) {
                    llenaPanelArtistas(this.artistasBuscados);
                    llenarPanelAlbum(this.albumesBuscados);
                    actualizarPanelCanciones(this.cancionesBuscadas);
                }
            }
        });

        // Evento para el botón "Buscar"
    }

    private void buscar() {
        String termino = txtBuscar.getText().trim().toLowerCase();

        // Si no hay término de búsqueda, ocultar el comboResultados
        if (termino.isEmpty()) {
            comboResultados.setVisible(false);
            return;
        }

        List<String> resultados = new ArrayList<>();

        try {
            List<String> generosNoDeseados = usuarioLoggeado.getGenerosNoDeseados();

            // Buscar en Artistas
            if (checkArtistas.isSelected() || (!checkAlbumes.isSelected() && !checkCanciones.isSelected())) {
                List<ArtistaDTO> artistas = abo.buscarArtistasPorNombre(termino);
                artistas.stream()
                        .filter(artista -> !generosNoDeseados.contains(artista.getGenero()))
                        .forEach(artista -> resultados.add("Artista: " + artista.getNombre()));
            }

            // Buscar en Álbumes
            if (checkAlbumes.isSelected() || (!checkArtistas.isSelected() && !checkCanciones.isSelected())) {
                List<AlbumDTO> albumes = albumbo.buscarPorNombre(termino);
                albumes.stream()
                        .filter(album -> {
                            try {
                                ArtistaDTO artista = abo.obtenerArtistaPorId(album.getArtistaId());
                                return !generosNoDeseados.contains(artista.getGenero());
                            } catch (NegocioException e) {
                                e.printStackTrace();
                                return false;
                            }
                        })
                        .forEach(album -> resultados.add("Álbum: " + album.getNombre()));
            }

            // Buscar en Canciones
            if (checkCanciones.isSelected() || (!checkArtistas.isSelected() && !checkAlbumes.isSelected())) {
                List<AlbumDTO> albumes = albumbo.obtenerAlbumes(); // Obtén todos los álbumes
                albumes.stream()
                        .filter(album -> {
                            try {
                                ArtistaDTO artista = abo.obtenerArtistaPorId(album.getArtistaId());
                                return !generosNoDeseados.contains(artista.getGenero()); // Filtra álbumes basados en el género del artista
                            } catch (NegocioException e) {
                                e.printStackTrace();
                                return false;
                            }
                        })
                        .forEach(album -> {
                            if (album.getCanciones() != null) { // Asegúrate de que el álbum tiene canciones
                                album.getCanciones().stream()
                                        .filter(cancion -> cancion.getTitulo() != null && cancion.getTitulo().toLowerCase().contains(termino)) // Filtra canciones por el término de búsqueda
                                        .forEach(cancion -> resultados.add("Canción: " + cancion.getTitulo()));
                            }
                        });
            }

            // Actualizar el comboResultados con los resultados
            comboResultados.removeAllItems();
            if (!resultados.isEmpty()) {
                resultados.forEach(comboResultados::addItem);
                comboResultados.setVisible(true); // Mostrar si hay resultados
            } else {
                comboResultados.setVisible(false); // Ocultar si no hay resultados
            }

        } catch (NegocioException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Ocurrió un error al buscar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void actualizarComboResultados() {
        String termino = txtBuscar.getText().trim().toLowerCase();

        if (termino.isEmpty()) {
            comboResultados.setVisible(false); // Ocultar si no hay término
            comboResultados.setPopupVisible(false); // Ocultar el desplegable
            return;
        }

        isUpdatingComboBox = true; // Desactivar temporalmente el evento de selección

        List<String> coincidencias = new ArrayList<>();
        try {
            List<String> generosNoDeseados = usuarioLoggeado.getGenerosNoDeseados();

            // Buscar en Artistas
            if (checkArtistas.isSelected() || (!checkAlbumes.isSelected() && !checkCanciones.isSelected())) {
                List<ArtistaDTO> artistas = abo.buscarArtistasPorNombre(termino);
                artistas.stream()
                        .filter(artista -> !generosNoDeseados.contains(artista.getGenero()))
                        .forEach(artista -> coincidencias.add("Artista: " + artista.getNombre()));
                this.artistasBuscados = artistas;

            }

            // Buscar en Álbumes
            if (checkAlbumes.isSelected() || (!checkArtistas.isSelected() && !checkCanciones.isSelected())) {
                List<AlbumDTO> albumes = albumbo.buscarPorNombre(termino);
                albumes.stream()
                        .filter(album -> {
                            try {
                                ArtistaDTO artista = abo.obtenerArtistaPorId(album.getArtistaId());
                                return !generosNoDeseados.contains(artista.getGenero());
                            } catch (NegocioException e) {
                                e.printStackTrace();
                                return false;
                            }
                        })
                        .forEach(album -> coincidencias.add("Álbum: " + album.getNombre()));
                this.albumesBuscados = albumes;

            }

            /// Buscar en Canciones
            if (checkCanciones.isSelected() || (!checkArtistas.isSelected() && !checkAlbumes.isSelected())) {
                List<AlbumDTO> albumes = albumbo.obtenerAlbumes(); // Obtén todos los álbumes
                List<DetallesCancionDTO> cancionesEncontradas = new ArrayList<>();
                albumes.stream()
                        .filter(album -> {
                            try {
                                ArtistaDTO artista = abo.obtenerArtistaPorId(album.getArtistaId());
                                return !generosNoDeseados.contains(artista.getGenero()); // Filtra álbumes basados en el género del artista
                            } catch (NegocioException e) {
                                e.printStackTrace();
                                return false;
                            }
                        })
                        .forEach(album -> {
                            if (album.getCanciones() != null) { // Asegúrate de que el álbum tiene canciones
                                album.getCanciones().stream()
                                        .filter(cancion -> cancion.getTitulo() != null && cancion.getTitulo().toLowerCase().contains(termino)) // Filtra canciones por el término de búsqueda
                                        .forEach(cancion -> {
                                            coincidencias.add("Canción: " + cancion.getTitulo());
                                            cancionesEncontradas.add(cancion); // Agrega la canción a la lista
                                        });
                            }
                        });

                this.cancionesBuscadas = cancionesEncontradas; // Actualiza la lista global de canciones encontradas

            }

            // Actualizar el comboResultados
            comboResultados.removeAllItems();
            if (!coincidencias.isEmpty()) {
                coincidencias.forEach(comboResultados::addItem);
                comboResultados.setVisible(true); // Mostrar si hay resultados
                comboResultados.setPopupVisible(true); // Desplegar automáticamente
            } else {
                comboResultados.setVisible(false); // Ocultar si no hay resultados
                comboResultados.setPopupVisible(false); // Ocultar el desplegable
            }

        } catch (NegocioException e) {
            e.printStackTrace();
        }

        isUpdatingComboBox = false; // Reactivar el evento de selección
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAlbumes;
    private javax.swing.JButton bAlbumes1;
    private javax.swing.JButton bAlbumes2;
    private javax.swing.JButton bAlbumes3;
    private javax.swing.JButton bCerrarSesion;
    private javax.swing.JButton bHome;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnPerfil;
    private javax.swing.JCheckBox checkAlbumes;
    private javax.swing.JCheckBox checkArtistas;
    private javax.swing.JCheckBox checkCanciones;
    private javax.swing.JComboBox<String> comboResultados;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JLabel lblNameUser;
    private javax.swing.JPanel panelAlbumes;
    private javax.swing.JPanel panelArtistas;
    private javax.swing.JPanel panelCanciones;
    private java.awt.PopupMenu popupResultados;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}
